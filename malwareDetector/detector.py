import os
import numpy as np

from typing import Any
from .config import read_config
from .utils import platform_info
from .const import DEFAULT_CONFIG_PATH

class detector(object):
    def __init__(self, config_path=None) -> None:
        '''
        read config.json by `read_config` function in `config.py`
        '''
        if config_path is None:
            config_path = DEFAULT_CONFIG_PATH
        self.config = read_config(config_path)

    def extractFeature(self) -> Any:
        '''
        This function must be implemented to extract feature information
        from the malware dataset and store the feature of each malware
        as a `Python list`.
        '''
        raise NotImplementedError("extractFeature must be implemented in the derived class.")

    def vectorize(self) -> np.array:
        '''
        This function must be implemented to vectorize the features
        in the malware feature list and store them in a recommended
        format using `numpy array`.
        '''
        raise NotImplementedError("vectorize must be implemented in the derived class.")

    def model(self, training:bool=True) -> Any:
        '''
        This function must be implemented.
        if `training=True`
            Train the model using the vectorized information.
        if `training=False`
            Use a pre-trained model. Note that this step will fail if no model has been trained.
        '''
        raise NotImplementedError("model must be implemented in the derived class.")

    def predict(self) -> np.array:
        '''
        This function must be implemented to make predictions
        using the trained model. The type of prediction depends
        on the type of model trained, for example: classification.
        '''
        raise NotImplementedError("predict must be implemented in the derived class.")

    def mkdir(self) -> None:
        '''
        According to the folder names specified
        in `self.config.folder.folder_list`,
        create the folders sequentially.
        If a folder already exists, keep it unchanged,
        and if it doesn't exist, create a new one.
        '''
        for folder in self.config.folder.folder_list:
            os.makedirs(folder, exist_ok=True)

if __name__ == "__main__":
    platform_info()